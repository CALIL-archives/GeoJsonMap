// Generated by CoffeeScript 1.7.1
var app, createMarker, log, map, moveMarker;

log = function(obj) {
  return {
    "try": console.log(obj)
  };
};

map = {
  map: null,
  init: function(divId) {
    return this.map = new google.maps.Map(document.getElementById(divId), {
      disableDefaultUI: true,
      zoom: 19,
      maxZoom: 32,
      center: {
        lat: 0,
        lng: 0
      },
      scaleControl: false
    });
  },
  loadFloorByLevel: function(level) {
    var geojson, latlng;
    geojson = app.getGeoJSONByLevel(level);
    this.map.data.forEach((function(_this) {
      return function(feature) {
        return _this.map.data.remove(feature);
      };
    })(this));
    latlng = new google.maps.LatLng(geojson.haika.xyLatitude, geojson.haika.xyLongitude);
    this.map.setCenter(latlng);
    this.map.data.addGeoJson(geojson);
    return this.drawGeoJSON();
  },
  drawGeoJSON: function(shelfId) {
    if (shelfId == null) {
      shelfId = 0;
    }
    return this.map.data.setStyle((function(_this) {
      return function(feature) {
        return _this.applyStyle(feature, shelfId);
      };
    })(this));
  },
  changeShelfColor: function(shelfId) {
    return drawGeoJSON(shelfId);
  },
  applyStyle: function(feature, shelfId) {
    var id, type;
    if (shelfId == null) {
      shelfId = 0;
    }
    id = feature.getProperty("id");
    type = feature.getProperty("type");
    if (type === 'floor') {
      return {
        fillColor: "#ffffff",
        fillOpacity: 0.5,
        strokeWeight: 0,
        zIndex: -1
      };
    }
    if (type === 'wall') {
      return {
        fillColor: "#555555",
        fillOpacity: 1,
        strokeWeight: 2,
        strokeColor: "#555555",
        strokeOpacity: 1
      };
    }
    if (type === 'shelf') {
      if (id === shelfId) {
        return {
          fillColor: "#ff0000",
          fillOpacity: 1,
          strokeWeight: 3
        };
      } else {
        return {
          fillColor: "#aaaaff",
          fillOpacity: 1,
          strokeWeight: 2
        };
      }
    }
  },
  loadFloorAndShowHighlight: function(level, shelfId) {
    loadFloorByLevel(level);
    return changeShelfColor(shelfId);
  },
  moveUserLocation: function(beaconId) {},
  removeUserLocation: function() {},
  createLevelMenu: function(levelArray) {
    var level, _i, _len;
    $('#map-level').empty();
    for (_i = 0, _len = levelArray.length; _i < _len; _i++) {
      level = levelArray[_i];
      $('#map-level').append("<li level=\"" + level + "\">" + level + "</li>");
    }
    return $('#map-level li').mousedown(function() {
      return map.loadFloorByLevel($(this).attr('level'));
    });
  }
};

map.init('map');

app = {
  geojsons: {},
  getGeoJSONByLevel: function(level) {
    var geojson;
    geojson = this.geojsons[level];
    geojson.haika = {
      xyLatitude: 35.1550682,
      xyLongitude: 136.9637741
    };
    return geojson;
  },
  loadGeoJSON: function(option) {
    return $.ajax({
      url: "http://lab.calil.jp/haika_store/load.php?major=" + option.major,
      type: 'POST',
      cache: false,
      dataType: 'json',
      error: (function(_this) {
        return function() {
          return option.error && option.error('データが読み込めませんでした');
        };
      })(this),
      success: (function(_this) {
        return function(data) {
          return option.success && option.success(data);
        };
      })(this)
    });
  },
  initGeoJSON: function(major) {
    return this.loadGeoJSON({
      major: major,
      success: (function(_this) {
        return function(data) {
          var geojson, level, levels, _ref;
          _this.geojsons = data.geojson;
          levels = [];
          _ref = data.geojson;
          for (level in _ref) {
            geojson = _ref[level];
            levels.push(level);
          }
          map.loadFloorByLevel(levels[0]);
          return map.createLevelMenu(levels.reverse());
        };
      })(this),
      error: function(message) {
        return alert(message);
      }
    });
  }
};

app.initGeoJSON(101);

createMarker = function() {
  var markerImage;
  markerImage = new google.maps.MarkerImage('img/marker.png', new google.maps.Size(34, 34), new google.maps.Point(0, 0), new google.maps.Point(17, 17));
  window.marker = new google.maps.Marker({
    position: map.getCenter(),
    map: map,
    icon: markerImage
  });
  return marker.setMap(map);
};

moveMarker = function() {
  var count, lat, lng;
  lat = map.getCenter().lat();
  lng = map.getCenter().lng();
  count = 20;
  return moveMarker = function() {
    lat = lat - 0.000005;
    lng = lng + 0.000005;
    marker.setPosition(new google.maps.LatLng(lat, lng));
    count = count - 1;
    if (count > 0) {
      return setTimeout(moveMarker, 10);
    }
  };
};

/*
//@ sourceMappingURL=app.map
*/
