// Generated by CoffeeScript 1.7.1
var log, map;

log = function(obj) {
  return {
    "try": console.log(obj)
  };
};

map = {
  googleMaps: null,
  userLocation: null,
  destLocation: null,
  geosjon: null,
  initDeferred: new $.Deferred,
  createMap: function(divId, zoom) {
    var options;
    if (divId == null) {
      divId = 'map-canvas';
    }
    if (zoom == null) {
      zoom = 20;
    }
    if (this.googleMaps) {
      return;
    }
    options = {
      zoom: zoom,
      maxZoom: 38,
      center: new google.maps.LatLng(-34.397, 150.644),
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      disableDefaultUI: true,
      scaleControl: false
    };
    this.googleMaps = new google.maps.Map(document.getElementById(divId), options);
    this.initDeferred.resolve().promise();
  },
  deferred: function(process) {
    var d;
    d = new $.Deferred();
    setTimeout(function() {
      if (typeof process === "function") {
        process();
      }
      d.resolve();
    }, 0);
    return d.promise();
  },
  loadFloorByLevel: function(level, shelfId) {
    var geoJsonWithoutBeacon, start_time;
    if (shelfId == null) {
      shelfId = 0;
    }
    start_time = new Date();
    this.createMap();
    geoJsonWithoutBeacon = null;
    return $.when(this.deferred((function(_this) {
      return function() {
        $('#map-level > li').css({
          'color': '#000000',
          'background-color': '#FFFFFF'
        });
        return $("#map-level > li[level='" + level + "']").css({
          'color': '#FFFFFF',
          'background-color': '#00BFFF'
        });
      };
    })(this)), this.deferred((function(_this) {
      return function() {
        _this.beforeBeaconId = 0;
        _this.beforeShelfId = 0;
        _this.userLocation = _this.removeMarker(_this.userLocation);
        _this.destLocation = _this.removeMarker(_this.destLocation);
        return _this.googleMaps.data.forEach(function(feature) {
          return _this.googleMaps.data.remove(feature);
        });
      };
    })(this)), this.deferred((function(_this) {
      return function() {
        _this.geojson = app.getGeoJSONByLevel(level);
        return geoJsonWithoutBeacon = _this.removeBeaconFromGeoJSON(_this.geojson);
      };
    })(this))).done((function(_this) {
      return function() {
        _this.googleMaps.setCenter(new google.maps.LatLng(_this.geojson.haika.xyLatitude, _this.geojson.haika.xyLongitude));
        _this.googleMaps.data.addGeoJson(geoJsonWithoutBeacon);
        _this.applyStyle(shelfId);
      };
    })(this));
  },
  removeBeaconFromGeoJSON: function(geojson) {
    var feature, newGeoJSON, _i, _len, _ref;
    newGeoJSON = {
      type: "FeatureCollection",
      features: []
    };
    _ref = geojson.features;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      feature = _ref[_i];
      if (feature.properties.type !== 'beacon') {
        newGeoJSON.features.push(feature);
      }
    }
    return newGeoJSON;
  },
  loadFloorAndChangeShelfColor: function(level, shelfId) {
    return this.loadFloorByLevel(level, shelfId);
  },
  changeShelfColor: function(shelfId) {
    return this.applyStyle(shelfId);
  },
  applyStyle: function(shelfId) {
    if (shelfId == null) {
      shelfId = 0;
    }
    this.googleMaps.data.revertStyle();
    return this.googleMaps.data.setStyle((function(_this) {
      return function(feature) {
        var id, type;
        type = feature.getProperty("type");
        id = feature.getProperty("id");
        if (type === 'floor') {
          return {
            fillColor: "#ffffff",
            fillOpacity: 0.5,
            strokeWeight: 0,
            zIndex: -1
          };
        }
        if (type === 'wall') {
          return {
            fillColor: "#555555",
            fillOpacity: 1,
            strokeWeight: 2,
            strokeColor: "#555555",
            strokeOpacity: 1
          };
        }
        if (type === 'shelf') {
          if (id === shelfId) {
            return {
              fillColor: "#FE0703",
              fillOpacity: 1,
              strokeWeight: 1
            };
          } else {
            return {
              fillColor: "#CEE1F2",
              fillOpacity: 1,
              strokeWeight: 1
            };
          }
        }
      };
    })(this));
  },
  getObjectCenterLatLng: function(objectId) {
    var coordinate, count, feature, lat, lng, _i, _j, _len, _len1, _ref, _ref1;
    lat = 0;
    lng = 0;
    count = 0;
    _ref = this.geojson.features;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      feature = _ref[_i];
      if (feature.properties.id === objectId) {
        count = feature.geometry.coordinates[0].length;
        _ref1 = feature.geometry.coordinates[0];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          coordinate = _ref1[_j];
          lat += coordinate[1];
          lng += coordinate[0];
        }
      }
    }
    if (lat === 0 && lng === 0) {
      return null;
    } else {
      return {
        'lat': lat / count,
        'lng': lng / count
      };
    }
  },
  beforeBeaconId: 0,
  createUserLocation: function(beaconId, markerType) {
    var objectCenter;
    if (markerType == null) {
      markerType = 'marker';
    }
    if (this.userLocation && this.beforeBeaconId === beaconId) {
      return;
    } else {
      this.beforeBeaconId = beaconId;
    }
    if (this.userLocation) {
      objectCenter = this.getObjectCenterLatLng(beaconId);
      if (!objectCenter) {
        this.userLocation = this.removeMarker(this.userLocation);
        return;
      }
      this.animateMarker([objectCenter.lat, objectCenter.lng]);
    } else {
      this.userLocation = this.createMarker(beaconId, markerType);
    }
    if (this.userLocation) {
      return this.userLocation.setMap(this.googleMaps);
    }
  },
  beforeShelfId: 0,
  createDestLocation: function(shelfId, markerType) {
    if (markerType == null) {
      markerType = 'destination-infowindow';
    }
    if (this.destLocation && this.beforeShelfId === shelfId) {
      return;
    } else {
      this.beforeShelfId = shelfId;
    }
    this.destLocation = this.removeMarker(this.destLocation);
    this.destLocation = this.createMarker(shelfId, markerType);
    if (this.destLocation) {
      return this.destLocation.setMap(this.googleMaps);
    }
  },
  iconMarker: function() {
    return new google.maps.MarkerImage('img/marker.png', new google.maps.Size(34, 34), new google.maps.Point(0, 0), new google.maps.Point(17, 17));
  },
  iconMarkerWindow: function() {
    return new google.maps.MarkerImage('img/marker-infowindow.png', new google.maps.Size(73, 85), new google.maps.Point(0, 0), new google.maps.Point(38, 68));
  },
  iconDest: function() {
    return new google.maps.MarkerImage('img/destination.png', new google.maps.Size(23, 30), new google.maps.Point(0, 0), new google.maps.Point(11, 30));
  },
  iconDestWindow: function() {
    return new google.maps.MarkerImage('img/destination-infowindow.png', new google.maps.Size(74, 85), new google.maps.Point(0, 0), new google.maps.Point(38, 85));
  },
  getIcon: function(markerType) {
    if (markerType === 'marker') {
      return this.iconMarker();
    }
    if (markerType === 'marker-infowindow') {
      return this.iconMarkerWindow();
    }
    if (markerType === 'destination') {
      return this.iconDest();
    }
    if (markerType === 'destination-infowindow') {
      return this.iconDestWindow();
    }
  },
  createMarker: function(objectId, markerType) {
    var marker, objectCenter, position;
    objectCenter = this.getObjectCenterLatLng(objectId);
    if (!objectCenter) {
      return null;
    }
    position = new google.maps.LatLng(objectCenter.lat, objectCenter.lng);
    marker = new google.maps.Marker({
      position: position,
      map: this.googleMaps,
      icon: this.getIcon(markerType)
    });
    return marker;
  },
  changeMarkerIcon: function(marker, markerType) {
    return marker.setIcon(this.getIcon(markerType));
  },
  removeMarker: function(marker) {
    if (marker) {
      marker.setMap(null);
    }
    return null;
  },
  removeUserLocation: function() {
    if (this.userLocation) {
      return this.userLocation = this.removeMarker(this.userLocation);
    }
  },
  drawingNumber: 50,
  animationFrameTime: 7,
  animationCounter: 0,
  startLatLng: void 0,
  animateLatLng: void 0,
  animationLat: void 0,
  animationLng: void 0,
  animateMarker: function(goLatLng) {
    if (!this.userLocation) {
      return;
    }
    this.changeMarkerIcon(this.userLocation, 'marker');
    this.startLatLng = [this.userLocation.getPosition().lat(), this.userLocation.getPosition().lng()];
    this.animationCounter = 0;
    this.animateLatLng = this.startLatLng;
    this.animationLat = (goLatLng[0] - this.startLatLng[0]) / this.drawingNumber;
    this.animationLng = (goLatLng[1] - this.startLatLng[1]) / this.drawingNumber;
    return this.moveMarker();
  },
  moveMarker: function() {
    if (!this.userLocation) {
      return;
    }
    this.animateLatLng[0] += this.animationLat;
    this.animateLatLng[1] += this.animationLng;
    this.userLocation.setPosition(new google.maps.LatLng(this.animateLatLng[0], this.animateLatLng[1]));
    if (this.animationCounter === this.drawingNumber) {
      return this.changeMarkerIcon(this.userLocation, 'marker-infowindow');
    } else {
      this.animationCounter++;
      return setTimeout((function(_this) {
        return function() {
          return _this.moveMarker();
        };
      })(this), this.animationFrameTime);
    }
  },
  createLevelMenu: function(levelArray) {
    var level, _i, _len;
    $('#map-level').empty();
    for (_i = 0, _len = levelArray.length; _i < _len; _i++) {
      level = levelArray[_i];
      $('#map-level').append("<li level=\"" + level + "\">" + level + "</li>");
    }
    return $('#map-level li').mousedown(function() {
      level = $(this).attr('level');
      return map.loadFloorByLevel(level);
    });
  }
};

/*
//@ sourceMappingURL=googlemap.map
*/
